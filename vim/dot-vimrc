syntax on
set showcmd
set number
set relativenumber
set tabstop=2
set shiftwidth=2
set statusline=%F\ -\ FileType:\ %y\ %l\/\%L
set hidden
set cursorline
set cursorlineopt=both

set termguicolors

hi CursorLine gui=underline cterm=underline

let mapleader = "\<Space>"

call plug#begin()

" List your plugins here
Plug 'liuchengxu/vim-which-key'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'kevinhwang91/promise-async' 
Plug 'ap/vim-buftabline'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ryanoasis/vim-devicons'
Plug 'mhinz/vim-startify'
Plug 'itmammoth/doorboy.vim'
Plug 'ghifarit53/tokyonight-vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Track the engine.
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline'
Plug 'christoomey/vim-tmux-navigator'

call plug#end()

let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 0
let g:tokyonight_cursor='blue'
" let g:tokyonight_current_word = 'underline'

colorscheme tokyonight

hi clear CursorLine
hi CursorLine gui=underline cterm=underline
	
let g:airline#extensions#tabline#enabled = 1
let g:airline_right_sep = ''
let g:airline_left_sep =  ''

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

let g:UltiSnipsEditSplit="vertical"

let g:startify_lists = [
			\{ "type" : "bookmarks", "header" : [ "Bookmarks" ] },
			\{ "type" : "sessions",  "header" : [ "Sessions" ] },
			\{ "type" : "commands",  "header" : [ "Commands" ] },
			\{ "type" : "files",     "header" : [ "MRU" ] },
			\{ "type" : "dir",       "header" : [ "Commits in : " .getcwd() ] },
			\]
let g:startify_files_number = 8

let g:startify_bookmarks = [{'v': '~/.vimrc'}, {'z': '~/.zshrc'},{'t':'~/.tmux.conf'}]
let g:ascii = [ 
	\"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⣠⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣡⣾⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣟⠻⣿⣿⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⣿⡿⢫⣷⣿⣿⣿⣿⣿⣿⣿⣾⣯⣿⡿⢧⡚⢷⣌⣽⣿⣿⣿⣿⣿⣶⡌⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⣿⠇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣇⣘⠿⢹⣿⣿⣿⣿⣿⣻⢿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⣿⠀⢸⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⡟⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣻⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⡇⠀⣬⠏⣿⡇⢻⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⣿⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⠀⠈⠁⠀⣿⡇⠘⡟⣿⣿⣿⣿⣿⣿⣿⣿⡏⠿⣿⣟⣿⣿⣿⣿⣿⣿⣿⣿⣇⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⡏⠀⠀⠐⠀⢻⣇⠀⠀⠹⣿⣿⣿⣿⣿⣿⣩⡶⠼⠟⠻⠞⣿⡈⠻⣟⢻⣿⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⢿⠀⡆⠀⠘⢿⢻⡿⣿⣧⣷⢣⣶⡃⢀⣾⡆⡋⣧⠙⢿⣿⣿⣟⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⡥⠂⡐⠀⠁⠑⣾⣿⣿⣾⣿⣿⣿⡿⣷⣷⣿⣧⣾⣿⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⡿⣿⣍⡴⠆⠀⠀⠀⠀⠀⠀⠀⠀⣼⣄⣀⣷⡄⣙⢿⣿⣿⣿⣿⣯⣶⣿⣿⢟⣾⣿⣿⢡⣿⣿⣿⣿⣿",
	\"⣿⡏⣾⣿⣿⣿⣷⣦⠀⠀⠀⢀⡀⠀⠀⠠⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣡⣾⣿⣿⢏⣾⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⣿⣿⣿⣿⣿⡴⠀⠀⠀⠀⠀⠠⠀⠰⣿⣿⣿⣷⣿⠿⠿⣿⣿⣭⡶⣫⠔⢻⢿⢇⣾⣿⣿⣿⣿⣿⣿",
	\"⣿⣿⣿⡿⢫⣽⠟⣋⠀⠀⠀⠀⣶⣦⠀⠀⠀⠈⠻⣿⣿⣿⣾⣿⣿⣿⣿⡿⣣⣿⣿⢸⣾⣿⣿⣿⣿⣿⣿⣿",
	\"⡿⠛⣹⣶⣶⣶⣾⣿⣷⣦⣤⣤⣀⣀⠀⠀⠀⠀⠀⠀⠉⠛⠻⢿⣿⡿⠫⠾⠿⠋⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
	\"⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⡆⣠⢀⣴⣏⡀⠀⠀⠀⠉⠀⠀⢀⣠⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
	\"⠿⠛⠛⠛⠛⠛⠛⠻⢿⣿⣿⣿⣿⣯⣟⠷⢷⣿⡿⠋⠀⠀⠀⠀⣵⡀⢠⡿⠋⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
	\"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠛⢿⣿⣿⠂⠀⠀⠀⠀⠀⢀⣽⣿⣿⣿⣿⣿⣿⣿⣍⠛⠿⣿⣿⣿⣿⣿⣿",
	\]
let g:startify_custom_header = g:ascii + startify#fortune#boxed()

if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'allowlist': ['c', 'cpp'],
        \ })
endif

set foldmethod=expr
  \ foldexpr=lsp#ui#vim#folding#foldexpr()
  \ foldtext=lsp#ui#vim#folding#foldtext()

let g:lsp_fold_enabled = 0

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    " nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

		vnoremap <buffer> <leader>/ <plug>()

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')

    " refer to doc to add more commands
endfunction

augroup lsp_install
	au!
	" call s:on_lsp_buffer_enabled only for languages that has the server registered.
	autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" nnoremap <silent> <leader> <cmd>WhichKey ''<CR> 
set timeoutlen=500

nnoremap <leader>h <cmd>wincmd s<CR>
nnoremap <leader>q <cmd>wincmd q<CR>
nnoremap <leader>v <cmd>wincmd v<CR>
nnoremap <leader>s <cmd>Startify<CR>
nnoremap <leader>fg <cmd>Lines<CR>
nnoremap <leader>fr <cmd>RG<CR>
nnoremap <leader>fz <cmd>BLines<CR>
nnoremap <silent> <F8> <Plug>OutlineToggle<CR>
nnoremap <silent> <leader>l <Plug>OutlineRefresh
nnoremap <silent> <leader>o <Plug>OutlineGoToOutline

nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nnoremap <C-s> <cmd>w<CR>

nnoremap <C-n> <cmd>NERDTreeToggle<CR>

nnoremap <tab> <cmd>bnext<CR>
nnoremap <S-Tab> <cmd>bprev<CR>
nnoremap <leader>x <cmd>bdelete<CR>

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> <cmd>TmuxNavigateLeft<CR>
nnoremap <silent> <C-j> <cmd>TmuxNavigateDown<CR>
nnoremap <silent> <C-k> <cmd>TmuxNavigateUp<CR>
nnoremap <silent> <C-l> <cmd>TmuxNavigateRight<CR>
nnoremap <silent> <C-\> <cmd>TmuxNavigatePrevious<CR>

function! Exe()
	if &filetype=="c"
		return "\<cmd>w\<CR>\<cmd>!gcc %:p -o %:r -Wall;./%:r\<CR>"
	elseif &filetype=="cpp"
		return "\<cmd>w\<CR>\<cmd>!g++ %:p -o %:r -Wall && ./%:r\<CR>"
	elseif &filetype=="rust"
		return "\<cmd>w\<CR>\<cmd>!cargo run\<CR>"
	elseif &filetype=="bash" || &filetype=="zsh"
		return "\<cmd>w\<CR>\<cmd>!bash %:p\<CR> "
	elseif &filetype=="python"
		return "\<cmd>w\<CR>\<cmd>!python %:p\<CR>"
	elseif &filetype=="vim"
		return "\<cmd>w\<CR>\<cmd>echo 'haha'\<CR>"
	elseif &filetype=="lua"
		return "\<cmd>w\<CR>\<cmd>!lua %:p\<CR>"
	else
		return "\<cmd>w\<CR>\<cmd>echo &filetype.' is not support to compile and execute'\<CR>"
	endif

	return "fail to load function"
endfunction

function! Test()
	let x = input("say something: ")
	echo x
endfunction

nnoremap <expr> <F9> Exe()
nnoremap <expr> <F3> Test() 
nnoremap <expr> j ( v:count == 0 ? "gj":"j" )
nnoremap <expr> k ( v:count == 0 ? "gk":"k" )

inorem jj <esc>
inoremap kk <esc>

vnorem > >gv
vnoremap < <gv
